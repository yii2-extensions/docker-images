on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (for example, 1.0.0)'
        required: true
        type: string

name: release

env:
  REGISTRY: ghcr.io

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_build: ${{ steps.version.outputs.should_build }}
    steps:
    - name: Extract version.
      id: version
      run: |
        VERSION=""
        SHOULD_BUILD="false"

        # From tag
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${GITHUB_REF#refs/tags/v}"
          SHOULD_BUILD="true"
        # From workflow dispatch
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          SHOULD_BUILD="true"
        # From PR title (optional)
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          if [[ "${{ github.event.pull_request.title }}" =~ \[v([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
            VERSION="${BASH_REMATCH[1]}"
            SHOULD_BUILD="true"
          fi
        fi

        # Validate semantic version
        if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "✅ Valid version: $VERSION"
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "⚠️ No valid version found"
        fi

  build:
    needs: validate-version
    if: needs.validate-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        build_type: [dev, full, prod]

    steps:
    - name: Checkout.
      uses: actions/checkout@v5

    - name: Setup Docker Buildx.
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry.
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare tags.
      id: tags
      run: |
        BASE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/apache"
        VERSION="${{ needs.validate-version.outputs.version }}"
        BUILD_TYPE="${{ matrix.build_type }}"
        PHP_VERSION="8.4"

        # Main tags with version
        TAGS="${BASE_NAME}:${VERSION}-${BUILD_TYPE}"
        TAGS="${TAGS},${BASE_NAME}:${PHP_VERSION}-${VERSION}-${BUILD_TYPE}"

        # Latest tag for prod on main branch
        if [[ "$BUILD_TYPE" == "prod" && "${{ github.ref }}" == refs/tags/v* ]]; then
          TAGS="${TAGS},${BASE_NAME}:latest"
          TAGS="${TAGS},${BASE_NAME}:${PHP_VERSION}-latest"
        fi

        # Build type latest
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          TAGS="${TAGS},${BASE_NAME}:${BUILD_TYPE}-latest"
        fi

        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        echo "📦 Tags: $TAGS"

    - name: Build and Push.
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./src/flavor/apache/Dockerfile
        push: ${{ github.ref_type == 'tag' }}
        tags: ${{ steps.tags.outputs.tags }}
        build-args: |
          BUILD_TYPE=${{ matrix.build_type }}
          PHP_VERSION=8.4
          VERSION=${{ needs.validate-version.outputs.version }}
        labels: |
          org.opencontainers.image.version=${{ needs.validate-version.outputs.version }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}
        cache-from: type=gha,scope=${{ matrix.build_type }}
        cache-to: type=gha,mode=max,scope=${{ matrix.build_type }}
